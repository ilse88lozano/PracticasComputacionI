
# -*- coding: utf-8 -*-
"""PrácticasCompu.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1k0GO_0X-P1ch5_w8fn75vD8IpL8_KUil
"""

#Gauss Jordan
import sys
def crearMatriz(Ec,l):
    for i in range(0,Ec):
        l.append([])
    for k in range(0,Ec):
        for m in range(0,Ec+1):
            l[k].append(0)
    return l

def crears(Ec,l):
    for i in range(0,Ec):
        l.append([])
    for k in range(0,Ec):
        for m in range(0,Ec+1):
            l[k].append(0)
    return l
    
def llenar(Ec,l):      
    for i in range(0, Ec):
        for j in range(0, Ec+1):
            l[i][j]=float(input("Introduce el elemento: "+ str(i)+","+str(j)))

    return l

def intercambio(f1,f2,n,l):
    for i in range(0,n+1):
        temp=l[f1][i]
        l[f1][i] = l[f2][i]
        l[f2][i] = temp
    return l

n=int(input("Número de ecuaciones"))

s=[]
M=[]
crearMatriz(n,M)
crears(n,s)
llenar(n, M)


for i in range(n):
    if M[i][i] == 0:
        if i+1==n:
            intercambio(i,i-1,n,M)
        else:
            intercambio(i,i+1,n,M)
    for j in range(n):
        if i != j:
            if M[i][i]==0:
                sys.exit("Sin solucion")
            else:
                aux = M[j][i]/M[i][i]

            for k in range(n+1):
                M[j][k] = M[j][k] - aux * M[i][k]


for i in range(n):
    if M[i][i]==0:
        sys.exit("Sin solucion")
    else:
        s[i] = M[i][n]/M[i][i]


print("Solución")
for l in range(n):
    print("x"+str(l)+" =",s[l])
